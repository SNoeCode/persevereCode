
/*  base styling  */
.wrapper {
    width: 80vw;
    height: 800px;
    background-color: darkgray;
    margin: auto;

}

.item {
    width: 150px;
    height: 150px;
    background-color: crimson;
    color: aliceblue;
    border: 2px solid black;
    text-align: center;
}
#main {
    height: 15px;
    width:1700px;
    background-color: rgb(0, 0, 0,.5);
    position:absolute;
    /* margin: auto; */
    top:400px;
    color: white;
    text-align: start;

}
#cross {
    height: 15px;
    width:1700px;
    background-color: rgb(0, 0, 0,.5);
    position:absolute;
    margin: auto;
    transform:rotate(90deg);
    color: white;
    text-align: center;
}
/*  To start making flexbox model we need to first define a flex container*/

.wrapper {
   display: flex;
  /* gap: 10px;
   flex-wrap: wrap;*/
   align-content: start;
 flex-direction: row;
 justify-content: start;
 align-items: s
/*cross=align and main=justify*/
/* row reverses the column*/

/* properties of the wrapper that contains items */
/* display:flex defines the flexible container and makes the items inside respond accordingly */
/* flex-direction - This establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns. */
/* justify-content - This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.*/
/* align-items - This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis). */
/* gap - The gap property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. */
/* flex-wrap - By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. */
/* align-content - This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.Used in conjunction with wrap */
/* flex-flow - This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes. The default value is row nowrap. */

/* properties of the flexible items */
/* flex-grow - This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. */
/* flex-shrink - This defines the ability for a flex item to shrink if necessary. */
/* flex-basis - This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The auto keyword means “look at my width or height property” (which was temporarily done by the main-size keyword until deprecated). The content keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren max-content, min-content, and fit-content do. */











/* display:flex defines the flexible container and makes the items inside respond accordingly */
/*  wrapper that contains items */
/* flex-direction */
/* justify-content */
/* align-items */
/* flex-wrap */
/* align-content */
